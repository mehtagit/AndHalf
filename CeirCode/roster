package org.fms.rest.controller;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.fms.feign.FeignService;
import org.fms.page.model.Button;
import org.fms.page.model.FilterRequest;
import org.fms.page.model.PageElement;
import org.fms.rest.POJO.TrainingRoasterPOJO;
import org.fms.rest.contentModel.TrainingRoasterContentModel;
import org.fms.rest.datatable.model.DatatableResponseModel;
import org.fms.rest.paginationModal.TrainingRoasterPaginationModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
@RestController
@CrossOrigin

public class TrainingRoasterDatatableController {
	String className = "emptyClass";
	@Autowired
	FeignService feignCleintImplementation;

	@Autowired
	DatatableResponseModel datatableResponseModel;

	@Autowired
	PageElement pageElement;
	@Autowired
	Button button;

	@Autowired
	IconsState iconState;

	
	  @Autowired TrainingRoasterPaginationModel trainingRoasterPaginationModel;
	  
	  @Autowired TrainingRoasterPOJO trainingRoasterPOJO;
	 

	private final Logger log = LoggerFactory.getLogger(getClass());

	@PostMapping("training_roaster_data")
	public ResponseEntity<?> viewRoasterList (@RequestHeader("Authorization") String Authorization,HttpServletRequest request){

		List<List<Object>> finalList=new ArrayList<List<Object>>();

		String filter = request.getParameter("filter");
		Gson gsonObject=new Gson();
		Object response;

		FilterRequest filterrequest = gsonObject.fromJson(filter, FilterRequest.class);
		/*
		 * filterrequest.setSearchString(request.getParameter("search[value]")); Integer
		 * pageSize = Integer.parseInt(request.getParameter("length")); Integer pageNo =
		 * Integer.parseInt(request.getParameter("start")) / pageSize ;
		 * log.info("pageSize :: "+pageSize); log.info("pageNo :: "+pageNo);
		 */


		//log.info("request send to the filter api ="+filterrequest);
		response = feignCleintImplementation.trainingRoster_filter("Bearer "+Authorization);
		
		  try {

				Gson gson= new Gson(); 
				String apiResponse = gson.toJson(response);
				trainingRoasterPOJO = gson.fromJson(apiResponse, TrainingRoasterPOJO.class);
				List<TrainingRoasterContentModel> paginationContentList = trainingRoasterPOJO.getData().getContent();
				if(paginationContentList.isEmpty()) {
					datatableResponseModel.setData(Collections.emptyList());
				}
				else {

					for(TrainingRoasterContentModel dataInsideList : paginationContentList) 
					{
						String id=String.valueOf(dataInsideList.getId());	
						String trainingCode=dataInsideList.getTrainingCode();
						String schoolName=dataInsideList.getSchool().getSchoolName();
						
						String scheduleDate=dataInsideList.getScheduledStartDate();
						String time=dataInsideList.getTime();
						String trainerName=(String)dataInsideList.getAsgTrainer();
						String action=iconState.trainingRoaster(id);

						Object[] finalData={schoolName,scheduleDate,time,trainingCode,trainerName,action}; 
						List<Object> finalDataList=new ArrayList<Object>(Arrays.asList(finalData));
						finalList.add(finalDataList);
						datatableResponseModel.setData(finalList);
					}

					datatableResponseModel.setRecordsTotal(trainingRoasterPOJO.getData().getNumberOfElements());
					datatableResponseModel.setRecordsFiltered(trainingRoasterPOJO.getData().getTotalElements());
					log.info("final response :::::::::: "+datatableResponseModel);
					return new ResponseEntity<>(datatableResponseModel, HttpStatus.OK); 
				}
			}
			catch(Exception e) {
				datatableResponseModel.setRecordsTotal(null);
				datatableResponseModel.setRecordsFiltered(null);
				datatableResponseModel.setData(Collections.emptyList());
				log.error(e.getMessage(),e);
				return new ResponseEntity<>(datatableResponseModel, HttpStatus.OK); 
			}
			return null;

		}
	
	
	
	
	
	
	
	
	
	@PutMapping("training_roaster_data")
	public ResponseEntity<?> updateRoster (@RequestHeader("Authorization") String Authorization,HttpServletRequest request,@RequestParam(name="rosterID",required = false) Integer rosterID){

		List<List<Object>> finalList=new ArrayList<List<Object>>();

		String filter = request.getParameter("filter");
		Gson gsonObject=new Gson();
		Object response = null;;

		FilterRequest filterrequest = gsonObject.fromJson(filter, FilterRequest.class);
		/*
		 * filterrequest.setSearchString(request.getParameter("search[value]")); Integer
		 * pageSize = Integer.parseInt(request.getParameter("length")); Integer pageNo =
		 * Integer.parseInt(request.getParameter("start")) / pageSize ;
		 * log.info("pageSize :: "+pageSize); log.info("pageNo :: "+pageNo);
		 */


		//log.info("request send to the filter api ="+filterrequest);
		response = feignCleintImplementation.trainingRoster_filter("Bearer "+Authorization);
		
		  try {

				Gson gson= new Gson(); 
				String apiResponse = gson.toJson(response);
				trainingRoasterPOJO = gson.fromJson(apiResponse, TrainingRoasterPOJO.class);
				List<TrainingRoasterContentModel> paginationContentList = trainingRoasterPOJO.getData().getContent();
				
				
					for(TrainingRoasterContentModel dataInsideList : paginationContentList) 
					{
				
						if(rosterID == dataInsideList.getId()) {
							Optional<TrainingRoasterContentModel> list= paginationContentList.stream()
				            .filter(TrainingRoasterContentModel -> rosterID == dataInsideList.getId())
				            .findFirst();
							 return new ResponseEntity<>(list, HttpStatus.OK); 	
						}
						else {
							return new ResponseEntity<>(Collections.emptyList(), HttpStatus.OK); 	
						}
				
			}
		  }
			catch(Exception e) {
			
				return new ResponseEntity<>(Collections.emptyList(), HttpStatus.OK); 
			}
			return null;

		}
}
