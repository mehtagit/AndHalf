package com.functionapps.parser;

import com.functionapps.db.Query;
import com.functionapps.zte.ZTEFields;

import java.util.HashMap;
import java.util.List;

import javax.print.attribute.standard.PrinterIsAcceptingJobs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;

import java.text.SimpleDateFormat;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
//import java.io.FileReader;
//import java.io.InputStreamReader;
//import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class HexFileReader {

	ZTEFields zte   = new ZTEFields();
	String[] fields = zte.zteCDRFields;
	
	public String getFields(){
		String retVal      = "{\"ColumnNames\":[";
		String columnNames = "";
		try{
			for( String column : fields ){
				columnNames = columnNames + "{\"colName\":\""+column+"\"},";
			}
			retVal = retVal + columnNames.substring( 0, columnNames.length() - 1 ) + "]}";	
		}catch(Exception e){
			retVal = "{\"ColumnNames\":[{\"colName\":\"400\"},{\"colName\":\"No file found.\"}]}";
			e.printStackTrace();
		}
		System.out.println(retVal);
		return retVal;
	}
	
	public boolean insertDataIntoRaw( String repName, HashMap< String, ArrayList< String > > fileData ) throws SQLException{
		int limit       = 10000;
		boolean result  = false;
		String query    = null;
		String values   = "values(";
		Connection conn      = null;
		PreparedStatement ps = null;
		ResultSet rs         = null;
		try{
			query = "insert into "+repName+"(";
			for( String field : fields ){
				query  = query + field + ",";
				values = values + "?,";
			}
			query = query.substring( 0, query.length() - 1 )+") "+values.substring( 0, values.length() - 1 )+")";
			conn  = new com.functionapps.db.MySQLConnection().getConnection();
			ps    = conn.prepareStatement( query );
			for( int j = 0; j < fileData.get(fields[0]).size(); j++ ){
				for( int i = 0; i < fields.length; i++ ){
					ps.setString( i+1, fileData.get(fields[i]).get(j));
				}
				ps.addBatch();
				if( (j % limit) == 0 && j != 0 ){
					ps.executeBatch();
					System.out.println("Data insert is ["+j+"]");
				}else if( j == (fileData.get(fields[0]).size() - 1) ){
					ps.executeBatch();
					System.out.println("Remaining data inserted is ["+j+"]");
				}
			}
			conn.commit();
			result = true;
		}catch( Exception e ){
			System.out.println("Failed to insert data.");
			conn.rollback();
			e.printStackTrace();
		}finally{
			try{
				if(conn != null){
					if(rs != null)
						rs.close();
					if( ps != null )
						ps.close();
					conn.close();
				}
			}catch(Exception ex){}
		}
		return result;
	}
	
	public String[] readBinaryFileUsingDIS( String fileName, String filePath, String repName ){
		String csvFilePath = "/home/ildidea/upload/"+repName+"/";
		int i = 0;
		int offset   = 0;
		int numRead  = 0;
		int sCalls   = 0;
		int fCalls   = 0;
		String cdrSeqNo      = null;
		String callDuraExt   = null;
		String cdrStartTime  = null;
		String cdrEndTime    = null;
		String endTime       = null;
		String data          = null;
		String fieldName     = null;
		String answerId      = null;
		String callDuration  = null;
		String partId        = null;
		File file            = null;
		FileInputStream fis  = null;
		DataInputStream dis  = null;
		byte[] buffer        = null;
		//String line          = null;
		int[] fieldOffset    = null;
		String[] result      = null;
		StringBuilder sbCsv  = null;
		FileWriter csvFileWriter = null;
		DecimalConverter dc  = new DecimalConverter();
		HashMap< String, int[] > hm = new HashMap< String, int[] >();
		try{
			/****************Insert Query and prepared statement start***************/
			//StringBuilder csvHeader=new StringBuilder();
			/*for( String field : fields ){
				csvHeader.append(field).append(",");
			}*/
			/****************Insert Query and prepared statement ends***************/
			buffer  = new byte[392];
			file    = new File(filePath);
			fis     = new FileInputStream(file);
			dis     = new DataInputStream( fis );
			hm      = zte.getfieldSet();
			sbCsv   = new StringBuilder();
			csvFileWriter=new FileWriter(csvFilePath+fileName+".csv");
			//csvHeader.setLength(Math.max(csvHeader.length() - 1, 0));
			//csvFileWriter.write(csvHeader.toString());
			//csvFileWriter.write(System.getProperty( "line.separator" ));
			while( ( offset < buffer.length ) && (numRead=dis.read(buffer, offset, buffer.length-offset)) >= 0 ){
					for( int j = 0; j < fields.length; j++ ){
						data = null;
						fieldOffset = new int[3];
						fieldName   = fields[j];
						if( !fieldName.equals("cdr_condsider") && !fieldName.equals("CallDurationInSec") && !fieldName.equals("Changed_date") && !fieldName.equals("cdr_date") ){
							fieldOffset = hm.get(fieldName);
							//System.out.println("Field name ["+fieldName+"]");
							byte[] byteData = null;
							switch( fieldOffset[2] ){
								case 0 : 
									byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
									data     = dc.hex2Decimal(dc.bytesToHex(byteData)); 
									break;
								case 1 :
									byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
									if( fieldName.equalsIgnoreCase("Call_Duration") ){
										data         = dc.bytesToHex(byteData);
										callDuration = data; 
										//System.out.println("Call_Duration hex value ["+dc.bytesToHex(byteData)+"]");
									}else{
										data = dc.getNumberFromBCD(dc.bytesToHex(byteData));
									}
									break;
								case 2 : 
									byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
									data     = dc.getNumberFromRightBCD(dc.bytesToHex(byteData));
									break;
								case 3:
									data = dc.getBitFromByte( buffer[fieldOffset[0]], fieldOffset[1]);
									break;
								case 4:
									byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
									data     = dc.getStringFromByte( byteData );
									break;
								default : 
									break;
							}
							if( fieldName.equalsIgnoreCase("AnswerID") ){
								answerId = data;
							}else if( fieldName.equalsIgnoreCase("EndTime") ){
								endTime  = data;
							}else if( fieldName.equalsIgnoreCase("SeqNum") ){
								cdrSeqNo = data;
							}else if( fieldName.equalsIgnoreCase("Call_Duration_Extended") ){
								callDuraExt = data;
							}else if( fieldName.equalsIgnoreCase("PartRecID") ){
								partId = data;
							}
							
							//ps.setString( j+1, data);
						}else if( fieldName.equals("CallDurationInSec") ){
							if( answerId.equals("1") ){
								//System.out.println("Call duration ["+callDuration+"]");
								data = this.getCallDurationInSecond( callDuration, partId, cdrSeqNo, callDuraExt );
							}else{
								data = "0";
							}
						}else if( fieldName.equals("Changed_date") || fieldName.equals("cdr_date") ){
							data = "0";
						}else{
							data = "N";
						}
						sbCsv.append(data).append(",");
					}
					sbCsv.setLength(Math.max(sbCsv.length() - 1, 0));
					csvFileWriter.write(sbCsv.toString());
					csvFileWriter.write(System.getProperty( "line.separator" ));
					sbCsv.setLength(0);
				i++;
				//break;
			}
			csvFileWriter.flush();
			new com.functionapps.files.FileList().moveFile(fileName, repName);
		}catch( Exception e ){
			e.printStackTrace();
		}finally{
			try{
				if( fis != null )
					fis.close();
				if( dis != null )
					dis.close();
			}catch( Exception ex ){}
			data         = null;
			fieldName    = null;
			file         = null;
			buffer       = null;
			fieldOffset  = null;
			dc           = null;
			hm           = null;
		}
		return result;
	}
	
	public String getCallDurationInSecond( String callDuration, String partId, String cdrSeqNo, String callDurationExt ){
		String duration = null;
		int seqNo  = 0;
		int hour   = 0;
		int minute = 0;
		int second = 0;
		int total  = 0;
		try{
			if( cdrSeqNo != null && !cdrSeqNo.equals("") ){
				seqNo    = Integer.valueOf( cdrSeqNo );
			}
			if( callDuration.length() == 8 ){
				//System.out.println("Hour part ["+callDuration.substring( 2, 4)+"],minute part ["+callDuration.substring( 4, 6)+"] and second part["+callDuration.substring( 6, 8)+"]");
				hour     = Integer.valueOf(callDuration.substring( 2, 4)) * 3600;
				minute   = Integer.valueOf(callDuration.substring( 4, 6)) * 60;
				second   = Integer.valueOf(callDuration.substring( 6, 8));
				//System.out.println("Hour part ["+hour+"],minute part ["+minute+"] and second part["+second+"]");
				if( partId.equals("3") && seqNo != 0 ){
					total = hour+minute+second + (( seqNo - 1 )*1800);
				}else{
					total = hour+minute+second;
				}
				if( callDurationExt != null && !callDurationExt.equals("") && !callDurationExt.equals("0") ){
					duration = String.valueOf((total + 1 ));
				}else{
					duration = String.valueOf(total);
				}
			}else{
				duration = "0";
			}
		}catch( Exception e ){
			e.printStackTrace();
		}
		return duration;
	}
	
	public boolean sortAllFile( String repName, String path ){
		boolean result = false;
		Process newProcess = null;
		String command     = null;
		try{
			if( path != null ){
				command = "sh "+path +"script/sort_file.sh "+path;
				System.out.println("Command to execute script is ["+command+"]");
				newProcess = Runtime.getRuntime().exec(command);
				newProcess.waitFor();
				System.out.println("File sorting completed.");
				result = true;
			}else{
				result = false;
			}
		}catch( Exception ex ){
			ex.printStackTrace();
		}
		return result;
	}

	public String[] readConvertedCSVFile( Connection conn, String fileName, String filePath, String repName ){
		String errorFilePath = "/home/ildidea/upload/"+repName+"/old/"+fileName+".error";
		Boolean inTrkStatus=false;
		String cdrCount   = null;
		String answerTime = null;
		String endTime    = null;
		String inTrkName  = null;
		String outTrkName = null;
		String inTrkNo    = null;
		String outTrkNo   = null;
		String partId     = null;
		String billId     = null;
		int sCount   = 0;
		int fCount   = 0;
		int startId  = 0;
		int endId    = 0;
		int endRow   = 0;
		int i = 0;
		int limit        = 10000;
		int startRow     = 0;
		int rowInserted  = 0;
		String query     = null;
		String values    = "values(";
		//Connection conn       = null;
		PreparedStatement ps  = null;
		PreparedStatement temPS = null;
		ResultSet rs          = null;
		String cdrStartTime   = null;
		String cdrEndTime     = null;
		String cdrTime        = null;
		String changeCDRTime  = null;
		String fieldName      = null;
		File file             = null;
		String line           = null;
		String str            = null;
		String answerId       = null;
		String startTime      = null;
		String preCDRTime     = null;
		String[] data         = null;
		BufferedReader br     = null;
		FileWriter fw         = null;
		FileReader fr         = null;
		String[] result       = null;
		Date date             = null;
		SimpleDateFormat actF = null;
		SimpleDateFormat sdf  = null;
		DataInputStream dis  = null;
		FileInputStream fis  = null;
		ArrayList< String > billIds = null;
		List< String > fieldList = null;
		HashMap< String, int[] > hm = new HashMap< String, int[] >();
		int fieldValue=0;
		
		try{
			fieldList = new ArrayList<String>();
			fieldList = Arrays.asList(fields);
			date  = new Date();
			actF  = new SimpleDateFormat("yyyyMMddHHmmssSS");
			sdf   = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			fw    = new FileWriter(errorFilePath);
			file  = new File(filePath);
			fr    = new FileReader(file);
			br    = new BufferedReader( fr );
			startTime = sdf.format(Calendar.getInstance().getTime());
			startRow  = new com.functionapps.db.Query().getStartIndexFromTable(conn, repName);
			/****************Insert Query and prepared statement start***************/
			query = "insert into "+repName+"(";
			for( String field : fields ){
				query  = query + field + ",";
				values = values + "?,";
			}
			query  = query.substring( 0, query.length() - 1 )+") "+values.substring( 0, values.length() - 1 )+")";
			conn   = new com.functionapps.db.MySQLConnection().getConnection();
			ps     = conn.prepareStatement( query, Statement.RETURN_GENERATED_KEYS );
			temPS = conn.prepareStatement( "insert into zte_billid_temp(partId,billId,answerTime) values(?,?,?)", Statement.RETURN_GENERATED_KEYS );
			/****************Insert Query and prepared statement ends***************/
			hm      = zte.getfieldSet();
			billIds = new ArrayList< String >();
			preCDRTime = this.getPreviousTimeFromRaw(repName, conn);
			
			while( ( line = br.readLine()) != null ){
				//fieldValue=fieldList.indexOf(fieldName);
				data = null;
				data = line.split( "," , -1);
				if( fields.length  == data.length ){
					endTime     = null;
					inTrkNo     = null;
					outTrkNo    = null;
					inTrkName   = null;
					outTrkName  = null;
					answerTime  = null;
					partId      = null;
					billId      = null;
					cdrTime     = null;
					endTime     = data[29];
					inTrkNo     = data[40];
					outTrkNo    = data[55];
					inTrkName   = data[94];
					outTrkName  = data[95];
					answerTime  = data[27];
					partId      = data[3];
					billId      = data[1];
					answerId    = data[36];
					inTrkStatus = inTrkName.substring( 0, 1).equalsIgnoreCase("I") || inTrkName.substring( 0, 1).equalsIgnoreCase("O") || inTrkName.substring( 0, 1).equalsIgnoreCase("P");
					
					//outTrkStatus = outTrkName.substring( 0, 1).equalsIgnoreCase("I") || outTrkName.substring( 0, 1).equalsIgnoreCase("O") || outTrkName.substring( 0, 1).equalsIgnoreCase("P");
					if( (partId.equals("0") || partId.equals("3")) && !endTime.equals("0") && (Integer.parseInt(inTrkNo) >= 10000 && Integer.parseInt(inTrkNo) <= 29999) && inTrkStatus){
						if( partId.equals("3") ){
							billIds.add(billId);
						}
						if( answerId.equals("0") ){
							fCount++;
						}else{
							sCount++;
						}
						//System.out.println( "\n\nLine number is ["+i+"],Field length is ["+fields.length+"] and data length ["+data.length+"]\n\n" );
						//if( fields.length  == data.length ){
						for( int j = 0; j < fields.length; j++ ){
	
								//cdrDate = "null";
								fieldName = fields[j];
								
								if( !( fieldName.equals("Changed_date") || fieldName.equals("cdr_date") || fieldName.equals("BillID") || fieldName.equals("PartRecID") || fieldName.equals("AnswerTime") || fieldName.equals("cdr_condsider") || fieldName.equals("EndTime") || fieldName.equals("InTrkGrpNo") || fieldName.equals("OutTrkGrpNo") || fieldName.equals("InTrkName") || fieldName.equals("OutTrkName") )){
									str = data[j];
									
									if( str.isEmpty() || str.equals(null) || str.equals("") ){
										str = "null";
									}							
									ps.setString( j+1, str);
								}else if( fieldName.equals("Changed_date") || fieldName.equals("cdr_date") || fieldName.equals("BillID") || fieldName.equals("PartRecID") || fieldName.equals("AnswerTime") || fieldName.equals("cdr_condsider") || fieldName.equals("EndTime") || fieldName.equals("InTrkGrpNo") || fieldName.equals("OutTrkGrpNo") || fieldName.equals("InTrkName") || fieldName.equals("OutTrkName") ){
								
									switch( fieldName ){
										case "EndTime" :
											if( answerId.equals("0") ){
												cdrTime = endTime;
											}
											if( cdrStartTime == null )
												cdrStartTime = endTime;
											cdrEndTime = endTime;
											//System.out.println("cdrStartTIme ["+cdrStartTime+"], cdrEndTime ["+cdrEndTime+"]");
											ps.setString( j+1, endTime);
											break;
										case "InTrkGrpNo" :
											ps.setString( j+1, inTrkNo);
											break;
										case "OutTrkGrpNo" :
											ps.setString( j+1, outTrkNo);
											break;
										case "InTrkName" :
											ps.setString( j+1, inTrkName );
											break;
										case "BillID" :
											ps.setString( j+1, billId);
											break;
										case "PartRecID" :
											ps.setString( j+1, partId);
											break;
										case "AnswerTime" :
											if( answerId.equals("1") ){
												cdrTime = answerTime;
											}
											ps.setString( j+1, answerTime);
											break;
										case "OutTrkName" :
											ps.setString( j+1, outTrkName);
											break;
										case "cdr_date" :
											ps.setString( j+1, cdrTime);
											break;
										case "Changed_date" :
											if( cdrTime.length() < 16  ){
												while( cdrTime.length() < 16 ){
													cdrTime = cdrTime+"0";
												}
											}
											if( (i == 0  && preCDRTime == null) || preCDRTime == null ){
												preCDRTime = cdrTime;
											}
											//System.out.println("Changed date["+cdrDate+"] and pre cdr date ["+preCDRTime+"]");
											if( i != 0 && cdrTime != null && preCDRTime != null && !cdrTime.equals("0") && actF.parse(cdrTime).compareTo(actF.parse(preCDRTime)) > 0 ){
												//System.out.println("Changed date["+cdrTime+"] and pre cdr date ["+preCDRTime+"]");
												changeCDRTime = cdrTime;
												preCDRTime    = cdrTime;
												//changeCDRTime = preCDRTime;
											}else{
												//changeCDRTime = cdrTime;
												//preCDRTime    = cdrTime;
												changeCDRTime = preCDRTime;
											}
											ps.setString( j+1, changeCDRTime);
											break;
										default :
											ps.setString( j+1, "Y");
											break;
									}
							}
						}
						//System.out.println("1.cdrStartTIme ["+cdrStartTime+"], cdrEndTime ["+cdrEndTime+"]");
						ps.addBatch();
						
						if( ( i % limit ) == 0 && i != 0 ){
							ps.executeBatch();
							if( ps != null )
								ps.clearParameters();
						}
					}else if( partId.equals("1") && (Integer.parseInt(inTrkNo) >= 10000 && Integer.parseInt(inTrkNo) <= 29999) && inTrkStatus ){
						temPS.setString( 1, partId );
						temPS.setString( 2, billId );
						temPS.setString( 3, answerTime );
						temPS.addBatch();
					}else{
						fw.write(line);
						fw.write("\n");
						//dos.write(buffer);
					}
					//System.out.println("cdrStartTIme ["+cdrStartTime+"], cdrEndTime ["+cdrEndTime+"]");
				}else{
					fw.write(line);
					fw.write("\n");
					//dos.write(buffer);
				}
				i++;
			}
			System.out.println("cdrStartTIme ["+cdrStartTime+"], cdrEndTime ["+cdrEndTime+"]");			
			ps.executeBatch();
		    rowInserted = ps.getUpdateCount();
			rs = ps.getGeneratedKeys();
			while( rs.next() ){
				endRow      = (int) rs.getLong(1);
				rowInserted = endRow - startRow;
			}
			
			if( rs != null ){
				rs.close();
			}
			//System.out.println("cdr start row is ["+startRow+"] and end row is ["+endRow+"]");
			this.updateCDRWithPartIdThree( conn, billIds, repName, cdrStartTime, startRow, endRow );
			startId = new Query().getStartIndexFromTable(conn,"zte_billid_temp");
			temPS.executeBatch();
			rs = temPS.getGeneratedKeys();
			while( rs.next() ){
				endId = (int)rs.getLong(1);
			}
			if( endId != 0 ){
				this.insertSlotStartAndEndSnoId( conn, cdrStartTime, startId, endId);
			}
			if( temPS != null ){
				temPS.clearParameters();
			}
			new com.functionapps.files.FileList().moveFile(fileName, repName);
							
			cdrCount = String.valueOf(i+1);
			
			if( cdrCount != null && cdrStartTime != null && cdrEndTime != null ){
				//System.out.println("CDR start time ["+cdrStartTime+"] and CDR end time ["+cdrEndTime+"]");
				result = new String[]{ cdrCount, cdrStartTime, cdrEndTime, String.valueOf(rowInserted), this.getTableSize( conn, repName),String.valueOf(sCount),String.valueOf(fCount) };
			}else{
				result = new String[]{ "0", "null", "null", "0", this.getTableSize( conn, repName),"0","0" };
			}
			conn.commit();
		}catch( Exception e ){
			e.printStackTrace();
			try{
				if( conn != null )
					conn.rollback();
			}catch( Exception ex ){}
			result = null;
			//result = new String[]{ "0", "null", "null", "0", this.getTableSize( conn, repName),"0","0" };
		}finally{
			try{
				if(conn != null){
					if(rs != null)
						rs.close();
					if( ps != null ){
						ps.clearParameters();
						ps.close();
					}
					if( temPS != null ){
						temPS.clearParameters();
						temPS.close();
					}
					//conn.close();
				}
				if( fis != null )
					fis.close();
				if( dis != null )
					dis.close();
				if( fw != null )
					fw.close();
			}catch( Exception ex ){}
			errorFilePath = null;
			query        = null;
			cdrCount     = null;
			answerTime   = null;
			endTime      = null;
			inTrkName    = null;
			outTrkName   = null;
			inTrkNo      = null;
			outTrkNo     = null;
			partId       = null;
			billId       = null;
			values       = null;
			cdrStartTime = null;
			cdrEndTime   = null;
			data         = null;
			fieldName    = null;
			file         = null;
			billIds      = null;
			hm           = null;
		}
		return result;
	}
	
	public String getPreviousTimeFromRaw( String repName, Connection conn ){
		String lastDate = null;
		String query    = null;
		ResultSet rs    = null;
		Statement stmt  = null;
		try{
			query = "select Changed_date from "+repName+" where sno=(select MAX(sno) from "+repName+")";
			stmt  = conn.createStatement();
			rs    = stmt.executeQuery(query);
			while( rs.next() ){
				lastDate = rs.getString("Changed_date");
			}
		}catch( Exception ex ){
			lastDate = null;
			ex.printStackTrace();
		}finally{
			if ( conn != null ){
				try{
					if ( rs != null )
						rs.close();
					if ( stmt != null )
						stmt.close();
					//conn.close();
				}catch(Exception e){
				}
			}
		}
		return lastDate;
	}
	
	public String getTableSize( Connection conn, String tableName ){
		String tableSize = null;
		String query     = null;
		//Connection conn  = null;
		Statement stmt   = null;
		ResultSet rs     = null;
		try{
			query = "SELECT round(sum((data_length + index_length) / 1024 / 1024 ), 4) `Size`  FROM information_schema.TABLES where table_name = '"+tableName+"'";
			//conn  = conn.getConnection();
			stmt  = conn.createStatement();
			rs     = stmt.executeQuery( query );
			
			while( rs.next() ){
				tableSize = rs.getString( "Size" );				
			}
		}catch(Exception e){
			e.printStackTrace();
			tableSize = "0";
		}finally{
			if ( conn != null ){
				try{
					if ( rs != null )
						rs.close();
					if ( stmt != null )
						stmt.close();
					//conn.close();
				}catch(Exception e){
				}
			}
		}
		return tableSize;
	}
	
	public boolean updateCDRWithPartIdThree( Connection conn, ArrayList< String > billIds, String repName, String startTime, int startSno, int endSno ){
		int i = 0;
		boolean result       = false;
		int eStartId         = 0;
		int eEndId           = 0;
		String query         = null;
		String updateQuery   = null;
		String tempBillID    = null;
		Statement stmt       = null;
		ResultSet rs         = null;
		PreparedStatement ps = null;
		ArrayList< Integer[] > idDetailsOfCdr  = null;
		//HashMap< String, String > tempBillIds = null;
		try{
			idDetailsOfCdr = new ArrayList< Integer[] >();
			idDetailsOfCdr = this.getBillIdDetailByCDRStartTime( conn, startTime );
			if( idDetailsOfCdr != null ){
				for( Object[] idDetail : idDetailsOfCdr ){
					if( i == 0 ){
						eStartId = (int) idDetail[0];
						eEndId   = (int)idDetail[1];
					}else{
						eEndId = (int)idDetail[1];
					}
					i++;
				}
				query       = "select billID,answerTime from zte_billid_temp where sno >="+eStartId+" and sno <="+eEndId;
				System.out.println("Query for getting all is :["+query+"]");
				stmt        = conn.createStatement();
				rs          = stmt.executeQuery( query );
				updateQuery = "update "+repName+" set AnswerTime=?,cdr_date=? where PartRecID='3' and BillID=? and sno >="+startSno+" and sno <="+endSno;
				//updateQuery = "update "+repName+" set AnswerTime=IF((select answerTime from zte_billid_temp where partID='1' and billID=?)IS NULL, AnswerTime, answerTime) where PartRecID='3' and BillID=?";
				ps          = conn.prepareStatement(updateQuery);
				if( rs != null ){
					//tempBillIds = new HashMap< String, String >();
					while( rs.next() ){
						tempBillID = rs.getString("billID");//rs.getString("answerTime")
						if( billIds.contains( tempBillID ) ){
							ps.setString( 1, rs.getString("answerTime"));
							ps.setString( 2, rs.getString("answerTime"));
							ps.setString( 3, tempBillID);
							//System.out.println("Update query for BillId ["+tempBillID+"] and AnswerTime ["+rs.getString("answerTime")+"] is :["+updateQuery.toString()+"]");
							ps.addBatch();
						}						
					}
				}
				ps.executeBatch();
			}
			if( conn != null ){
				conn.commit();
			}
			//stmt = conn.createStatement();
			//stmt.executeQuery("delete from zte_billid_temp where answerTime<=DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 3 HOUR)")
			
		}catch( Exception e ){
			try{
				if( conn != null )
					conn.rollback();
			}catch( Exception ex ){}
			result = false;
			e.printStackTrace();
		}finally{
			try{
				if( ps != null ){
					ps.clearParameters();
					ps.close();
				}
				if( rs != null )
					rs.close();
				if( stmt != null )
					stmt.close();
			}catch( Exception ex ){}
		}
		return result;
	}
	
	public boolean insertSlotStartAndEndSnoId( Connection conn, String cdrStartTime, int eStartId, int eEndId ){
		boolean result = false;
		try{
			result = new com.functionapps.db.Query().insert( conn, "insert into zte_id_details(cdr_start_time,e_start_id,e_end_id) values('"+cdrStartTime+"',"+eStartId+","+eEndId+")");
		}catch( Exception ex ){
			result = false;
			ex.printStackTrace();
		}
		return result;
	}
	
	public ArrayList< Integer[] > getBillIdDetailByCDRStartTime( Connection conn, String cdrStartTime ){
		ArrayList< Integer[] > result = null;
		String query         = null;
		Statement stmt       = null;
		ResultSet rs         = null;
		try{
			query = "select e_start_id,e_end_id from zte_id_details where DATE_FORMAT(cdr_start_time,'%Y-%m-%d %H:%i:%s') <= DATE_SUB(FROM_UNIXTIME(FLOOR( UNIX_TIMESTAMP('"+cdrStartTime+"')/300 ) * 300),INTERVAL 15 MINUTE) AND DATE_FORMAT(cdr_start_time,'%Y-%m-%d %H:%i:%s') >= DATE_SUB(FROM_UNIXTIME(FLOOR( UNIX_TIMESTAMP('"+cdrStartTime+"')/300 ) * 300),INTERVAL 2 HOUR)";
			System.out.println("Query for getting id range is ["+query+"]");
			stmt  = conn.createStatement();
			rs    = stmt.executeQuery(query);
			if( rs != null ){
				result = new ArrayList< Integer[] >();
				while( rs.next() ){
					result.add( new Integer[]{ rs.getInt("e_start_id"),rs.getInt("e_end_id") } );
				}
			}
		}catch( Exception ex ){
			ex.printStackTrace();
		}finally{
			try{
				if( rs != null )
					rs.close();
				if( stmt != null )
					stmt.close();
			}catch( Exception ex ){}
		}
		return result;
	}
	
	public String getDatabaseSize( Connection conn, String dbName ){
		String result  = null;
		Statement stmt = null;
		ResultSet rs   = null;
		try{
			stmt = conn.createStatement();
			rs   = stmt.executeQuery("SELECT  sum(round(((data_length + index_length) / 1024 / 1024 ), 4))  as size FROM information_schema.TABLES  WHERE table_schema ='"+dbName+"'");
			if( rs != null ){
				while( rs.next() ){
					result = rs.getString("size");
				}
			}
		}catch( Exception e ){
			result = "0";
			e.printStackTrace();
		}finally{
			try{
				if( rs != null )
					rs.close();
				if( stmt != null )
					stmt.close();
			}catch( Exception ex ){}
		}
		return result;
	}
	
	/*
	public boolean readHexdumpFile( String path, String fileName ){
		int i = 0;
		int lineLimit = 300;
		char[] buffSize  = new char[392];
		byte[] buffSize1 = new byte[392]; 
		boolean result    = false;
		//File file      = null;
		BufferedReader br = null;
		StringBuffer sb  = new StringBuffer();
		String line = null;
		Process newProcess = null;
		DecimalConverter dc = new DecimalConverter();
		try{
			//br = new BufferedReader( new FileReader(path+fileName));
			newProcess = Runtime.getRuntime().exec( "hexdump "+path+fileName );
			br         = new BufferedReader( new InputStreamReader( newProcess.getInputStream() ));
			//br = new BufferedReader( new FileInputStream(path+fileName));
			br.read(buffSize);
			sb.append(buffSize,2,0);
			System.out.println(dc.hex2Decimal(sb.toString()));
			br.close();
		}catch( Exception e ){
			e.printStackTrace();
			result = false;
		}
		return result;
	}
	*/
	
	/*public HashMap< String, ArrayList< String > > readBinaryFileUsingDIS( String fileName, String filePath, String repName ){
		int i = 0;
		int offset  = 0;
		int numRead = 0;
		//boolean result       = false;
		int limit       = 10000;
		//boolean result  = false;
		String query    = null;
		String values   = "values(";
		Connection conn      = null;
		PreparedStatement ps = null;
		ResultSet rs         = null;
		String cdrConsider   = null;
		String cdrStartTime  = null;
		String drEndTime     = null;
		String data          = null;
		String fieldName     = null;
		File file            = null;
		FileInputStream fis  = null;
		DataInputStream dis  = null;
		byte[] buffer        = null;
		//String line          = null;
		int[] fieldOffset    = null;
		DecimalConverter dc  = new DecimalConverter();
		ArrayList< String > temp    = null; 
		HashMap< String, int[] > hm = new HashMap< String, int[] >();
		//HashMap< String, String > fieldValues = new HashMap< String, String >();
		HashMap< String, ArrayList< String > > result      = new HashMap< String, ArrayList< String > >();
		HashMap< String, ArrayList< String > > fieldValues = new HashMap< String, ArrayList< String > >();
		try{
			query = "insert into "+repName+"(";
			for( String field : fields ){
				query  = query + field + ",";
				values = values + "?,";
			}
			query = query.substring( 0, query.length() - 1 )+") "+values.substring( 0, values.length() - 1 )+")";
			conn  = new com.functionapps.db.MySQLConnection().getConnection();
			ps    = conn.prepareStatement( query );
			buffer = new byte[392];
			file = new File(filePath);
			fis  = new FileInputStream(file);
			dis  = new DataInputStream( fis );
			hm   = zte.getfieldSet();
			//i = dis.read( buffer );
			while( ( offset < buffer.length ) && (numRead=dis.read(buffer, offset, buffer.length-offset)) >= 0 ){
				for( int j = 0; j < fields.length; j++ ){
					data = null;
					temp = new ArrayList< String >();
					fieldOffset = new int[3];
					fieldName   = fields[j];
					if( !fieldName.equals("cdr_condsider") ){
						fieldOffset = hm.get(fieldName);
						byte[] byteData = null;
						if( i != 0 ){
							temp = fieldValues.get( fieldName );
						}
						switch( fieldOffset[2] ){
							case 0 : 
								byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
								data     = dc.hex2Decimal(dc.bytesToHex(byteData)); 
								temp.add( data );
								break;
							case 1 :
								
								byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
								//System.out.println("FieldName:["+fieldName+"],Offset["+fieldOffset[0]+"],EndIndex["+fieldOffset[0]+fieldOffset[1]+"] and Hex ["+dc.bytesToHex(byteData)+"]");
								data     = dc.getNumberFromBCD(dc.bytesToHex(byteData));
								temp.add( data );
								break;
							case 2 : 
								byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
								data     = dc.getNumberFromRightBCD(dc.bytesToHex(byteData));
								temp.add( data );
								break;
							case 3:
								data = dc.getBitFromByte( buffer[fieldOffset[0]], fieldOffset[1]);
								temp.add( data );
								//System.out.println("Original data:"+fieldOffset[1]+", Type 3 data offset:"+(int)fieldOffset[1]);
								//System.out.println("byte:"+buffer[131]+",bits:"+Integer.toBinaryString( (int) buffer[131]));
								break;
							case 4:
								byteData = Arrays.copyOfRange( buffer, fieldOffset[0], fieldOffset[0]+fieldOffset[1]);
								data     = dc.getStringFromByte( byteData );
								temp.add( data );
								//System.out.println("Original data:"+fieldOffset[1]+", Type 3 data offset:"+(int)fieldOffset[1]);
								//System.out.println("byte:"+buffer[131]+",bits:"+Integer.toBinaryString( (int) buffer[131]));
								break;
							default : 
								break;
						}
						if( fieldName.equals("EndTime") && data != null || !data.equals("NULL") || !data.equals("0") || !data.equals("") ){
							cdrConsider = "Y";
							if( i == 0 ){
								cdrStartTime = data;
							}
						}else{
							cdrConsider = "N";
						}
						ps.setString( j+1, data);
					}else{
						ps.setString( j+1, data);
						temp.add(cdrConsider);
					}
					if( i == 0 ){
						fieldValues.put( fieldName, temp );
					}
				}
				i++;
			}
			result = fieldValues;
			new com.functionapps.files.FileList().moveFile(fileName, repName);
			//System.out.println(fieldValues.toString());
		}catch( Exception e ){
			e.printStackTrace();
			result = null;
		}finally{
			try{
				if(conn != null){
					if(rs != null)
						rs.close();
					if( ps != null )
						ps.close();
					conn.close();
				}
				if( fis != null )
					fis.close();
				if( dis != null )
					dis.close();
			}catch( Exception ex ){}
		}
		return result;
	}*/
	public int getFieldIndex( String fieldName ){
		int result = 0;
		List< String > fieldList = null;
		try{
			fieldList = new ArrayList<String>();
			fieldList = Arrays.asList(fields);
			if( fieldList.contains(fieldName) ){
				result = fieldList.indexOf(fieldName);
			}
		
		}catch( Exception ex ){
			result = 0;
			ex.printStackTrace();
		}
		return result;
	}
	 
}
